// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/UseCase/DeleteTodoUseCase/delete_todo_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;
import 'package:todo_app/Model/Entities/Todo/todo.dart' as _i5;
import 'package:todo_app/Model/TodoList/todo_list.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeAsyncNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoListState_2 extends _i1.SmartFake implements _i3.TodoListState {
  _FakeTodoListState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoList].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoList extends _i1.Mock implements _i3.TodoList {
  MockTodoList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<_i3.TodoListState> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue:
            _FakeAutoDisposeAsyncNotifierProviderRef_0<_i3.TodoListState>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.AutoDisposeAsyncNotifierProviderRef<_i3.TodoListState>);
  @override
  _i2.AsyncValue<_i3.TodoListState> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAsyncValue_1<_i3.TodoListState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AsyncValue<_i3.TodoListState>);
  @override
  set state(_i2.AsyncValue<_i3.TodoListState>? newState) => super.noSuchMethod(
        Invocation.setter(
          #state,
          newState,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i3.TodoListState> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i4.Future<_i3.TodoListState>.value(_FakeTodoListState_2(
          this,
          Invocation.getter(#future),
        )),
      ) as _i4.Future<_i3.TodoListState>);
  @override
  _i4.Future<_i3.TodoListState> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _i4.Future<_i3.TodoListState>.value(_FakeTodoListState_2(
          this,
          Invocation.method(
            #build,
            [],
          ),
        )),
      ) as _i4.Future<_i3.TodoListState>);
  @override
  _i4.Future<bool> addTodo(_i5.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #addTodo,
          [todo],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> updateTodo(_i5.Todo? newTodo) => (super.noSuchMethod(
        Invocation.method(
          #updateTodo,
          [newTodo],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteTodo(_i5.Todo? todo) => (super.noSuchMethod(
        Invocation.method(
          #deleteTodo,
          [todo],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i3.TodoListState> update(
    _i4.FutureOr<_i3.TodoListState> Function(_i3.TodoListState)? cb, {
    _i4.FutureOr<_i3.TodoListState> Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [cb],
          {#onError: onError},
        ),
        returnValue: _i4.Future<_i3.TodoListState>.value(_FakeTodoListState_2(
          this,
          Invocation.method(
            #update,
            [cb],
            {#onError: onError},
          ),
        )),
      ) as _i4.Future<_i3.TodoListState>);
  @override
  bool updateShouldNotify(
    _i2.AsyncValue<_i3.TodoListState>? previous,
    _i2.AsyncValue<_i3.TodoListState>? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
